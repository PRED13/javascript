"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pokemon = void 0;
const eggGroup_1 = require("./eggGroup");
const name_1 = require("./name");
const type_1 = require("./type");
const ability_1 = require("./ability");
const status_1 = require("./status");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const megaPokemonJson = require('./resources/pokemon/mega.json');
class Pokemon {
    constructor(pokemon, gen, lang) {
        /**
         * Compares Pokemon name with the specified object for order.
         *
         * @param pokemon pokemon to be compared
         * @return {number} -1, 0, or 1 as this object is less than, equal to, or greater than the specified object.
         */
        this.compareName = (pokemon) => {
            if (this.name < pokemon.name) {
                return -1;
            }
            if (this.name > pokemon.name) {
                return 1;
            }
            if (this.formName === undefined && pokemon.formName === undefined) {
                return 0;
            }
            else if (this.formName === undefined) {
                return -1;
            }
            else if (pokemon.formName === undefined) {
                return 1;
            }
            else if (this.formName < pokemon.formName) {
                return -1;
            }
            else if (this.formName > pokemon.formName) {
                return 1;
            }
            else {
                return 0;
            }
        };
        /**
         * Compares Pokemon id with the specified object for order.
         *
         * @param pokemon pokemon to be compared
         * @return {number} a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
         */
        this.compareId = (pokemon) => {
            if (this.id !== pokemon.id) {
                return Number(this.id) - Number(pokemon.id);
            }
            if (this.formName === undefined && pokemon.formName !== undefined) {
                return -1;
            }
            if (pokemon.formName === undefined && this.formName !== undefined) {
                return 1;
            }
            return 0;
        };
        this.id = pokemon.id;
        if (pokemon.formId !== undefined) {
            this.formName = (0, name_1.getFormName)(this.id, pokemon.formId, lang);
        }
        if (pokemon.localId !== undefined) {
            this.localId = {};
            if (pokemon.localId.galar !== undefined) {
                this.localId.galar = pokemon.localId.galar;
            }
            if (pokemon.localId.paldea !== undefined) {
                this.localId.paldea = pokemon.localId.paldea;
            }
        }
        this.name = (0, name_1.getName)(pokemon.id, lang);
        this.type = (0, type_1.getType)(pokemon.type, lang);
        this.ability = (0, ability_1.getAbility)(pokemon.abilities, lang);
        this.eggGroup = (0, eggGroup_1.getEggGroup)(pokemon.egg_groups, lang);
        this.baseStats = new status_1.Status(pokemon.status);
        if (pokemon.mega_evolve !== undefined && pokemon.mega_evolve === true) {
            this.megaEvolution = megaPokemonJson[pokemon.id].map(mega => new MegaPokemon(mega, lang));
        }
        if (gen !== null) {
            this.generation = gen;
        }
    }
}
exports.Pokemon = Pokemon;
class MegaPokemon {
    constructor(pokemon, lang) {
        this.name = (0, name_1.getName)(pokemon.id, lang);
        this.type = (0, type_1.getType)(pokemon.type, lang);
        this.ability = (0, ability_1.getAbility)(pokemon.abilities, lang);
        this.baseStats = new status_1.Status(pokemon.status);
    }
}
